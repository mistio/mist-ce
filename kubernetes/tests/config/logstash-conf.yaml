apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-conf
  namespace: REPLACE_NAMESPACE
data:
  logstash.conf: |
    input  {

        # Mist.io Logs
        rabbitmq {
            host => "${RABBITMQ_URI:rabbitmq}"
            port => 5672
            user => "guest"
            password => "guest"
            exchange => "events"
            exchange_type => "topic"
            key => "*.*.*.*"
            queue => "equeue"
            durable => "false"
            exclusive => "false"
            auto_delete => "false"
            ack => "false"
            tags => ["logs", "%{type}"]
        }

        # Data for historic inventory and cost reporting
        rabbitmq {
            host => "${RABBITMQ_URI:rabbitmq}"
            port => 5672
            user => "guest"
            password => "guest"
            exchange => "machines_inventory"
            exchange_type => "fanout"
            queue => "machines_inventory_queue"
            durable => "false"
            exclusive => "false"
            auto_delete => "false"
            ack => "false"
            tags => ["machines_inventory"]
        }

        # Cloudify Metrics
        rabbitmq {
            host => "${RABBITMQ_URI:rabbitmq}"
            port => 5672
            user => "guest"
            password => "guest"
            exchange => "cloudify-metrics"
            exchange_type => "topic"
            key => "*.*.*"
            queue => "cqueue"
            durable => "false"
            exclusive => "false"
            auto_delete => "false"
            ack => "false"
            tags => ["insights", "metrics"]
        }

        # Exceptions
        rabbitmq {
            host => "${RABBITMQ_URI:rabbitmq}"
            port => 5672
            user => "guest"
            password => "guest"
            exchange => "exceptions"
            exchange_type => "topic"
            key => "*.*"
            queue => "excqueue"
            durable => "false"
            exclusive => "false"
            auto_delete => "false"
            ack => "false"
            tags => ["exception"]
       }

    }

    filter {
        date {
            match => ["time", "UNIX"]
        }

        mutate {
            remove_field => ["_id"]
            lowercase => ["owner_id"]
        }
    }

    output {

        if "logs" in [tags] {

            if [type] == "ui" {
                elasticsearch {
                    hosts => ["${ELASTIC_URI}"]
                    user => "${ELASTIC_USERNAME}"
                    password => "${ELASTIC_PASSWORD}"
                    index => "ui-logs-%{+YYYY}"
                    document_type => "%{type}"
                    idle_flush_time => "${LOGS_FLUSH_TIME:1}"
                    flush_size => "${LOGS_FLUSH_SIZE:10}"
                }
            }

            else {
                elasticsearch {
                    hosts => ["${ELASTIC_URI}"]
                    user => "${ELASTIC_USERNAME}"
                    password => "${ELASTIC_PASSWORD}"
                    index => "app-logs-%{+YYYY}"
                    document_type => "%{type}"
                    idle_flush_time => "${LOGS_FLUSH_TIME:1}"
                    flush_size => "${LOGS_FLUSH_SIZE:10}"
                }
            }

        }

        else if "machines_inventory" in [tags] {
            elasticsearch {
                hosts => ["${ELASTIC_URI}"]
                user => "${ELASTIC_USERNAME}"
                password => "${ELASTIC_PASSWORD}"
                index => "machines_inventory-%{+YYYY.MM}"
                document_type => "cost"
                idle_flush_time => "${COST_FLUSH_TIME:1}"
                flush_size => "${COST_FLUSH_SIZE:100}"
            }
        }

        else if "insights" in [tags] and "metrics" in [tags] {
            elasticsearch {
                hosts => ["${ELASTIC_URI}"]
                user => "${ELASTIC_USERNAME}"
                password => "${ELASTIC_PASSWORD}"
                index => "%{owner_id}-cloudify-metrics-%{+YYYY.MM}"
                document_type => "%{name}"
                idle_flush_time => "${INSIGHTS_FLUSH_TIME:1}"
                flush_size => "${INSIGHTS_FLUSH_SIZE:200}"
            }
        }

        else if "exception" in [tags] {
            elasticsearch {
                hosts => ["${ELASTIC_URI}"]
                user => "${ELASTIC_USERNAME}"
                password => "${ELASTIC_PASSWORD}"
                index => "exceptions-%{+xxxx.ww}"
                document_type => "exception"
                idle_flush_time => "${EXC_FLUSH_TIME:1}"
                flush_size => "${EXC_FLUSH_SIZE:10}"
            }
        }
    }
