# Docker compose definition to run mist.io in production mode, so no mounted
# code, no dev containers etc. Only this single file is required.

version: '2.0'

services:


  mongodb:
    image: mongo:3.2
    volumes:
      - mongodb:/data/db:rw

  rabbitmq:
    image: rabbitmq:3.6.6-management

  memcached:
    image: memcached


  elasticsearch:
    image: elasticsearch:5.1.2
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data:rw

  logstash:
    image: mist/logstash:$MIST_TAG
    depends_on:
      - elasticsearch
      - rabbitmq

  elasticsearch-manage:
    image: mist/elasticsearch-manage:$MIST_TAG
    command: ./scripts/add_templates.py
    depends_on:
      - elasticsearch
      - rabbitmq

  kibana:
    image: kibana:5.1.2
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - elasticsearch


  socat:
    image: mist/docker-socat
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw

  mailmock:
    image: mist/mailmock


  celery: &backend
    image: mist/mist:io-$MIST_TAG
    depends_on:
      - memcached
      - mongodb
      - elasticsearch
      - rabbitmq
    stdin_open: true
    tty: true
    command: /mist.api/bin/celery

  scheduler:
    <<: *backend
    command: /mist.api/bin/scheduler

  poller:
    <<: *backend
    command: /mist.api/bin/poller

  hubshell:
    <<: *backend
    command: /mist.api/bin/hubshell

  api:
    <<: *backend
    command: /mist.api/bin/uwsgi
    expose:
      - 80

  sockjs:
    <<: *backend
    command: /mist.api/bin/sockjs
    expose:
      - 8081


  ui:
    image: mist/ui:io-$MIST_TAG
    command: sh /entry.sh
    stdin_open: true
    tty: true
    expose:
      - 80

  landing:
    image: mist/landing:io-$MIST_TAG
    command: sh /entry.sh
    stdin_open: true
    tty: true
    expose:
      - 80


  nginx:
    image: mist/nginx:$MIST_TAG
    ports:
      - 80:80
    depends_on:
      - api
      - landing
      - ui

volumes:
  elasticsearch: {}
  mongodb: {}
