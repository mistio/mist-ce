# Used to label kubernetes resources. This should only differ between different
# product/brandings. It shouldn't be overriden when deploying the chart.
productShortName: mist

# Settings for docker images used in the chart.
image: &image-properties
  registry: mistce
  tag: 4-7-x
  pullPolicy: Always
  secrets:
    - name: registry

ingress-nginx:
  deploy: true

# HTTP settings for the deployed application.
http:
  host: localhost
  http2: false
  static: ''
  tlsSecret: ''
  tlsHosts: []
  tlsAnnotations: {}
  tlsClusterIssuer: ''

# Email settings. Change this to connect to a real SMTP server.
smtp:
  host: ''
  port: 8025
  username: ''
  password: ''
  tls: false
  starttls: false

# Elasticsearch settings. Change this to use a remote elasticsearch cluster.
elasticsearch:
  host: ''
  port: 9200
  username: ''
  password: ''
  tls: false
  verifyCerts: false
  storageSize: 1024Mi

# InfluxDB settings. Change this to use a remote InfluxDB cluster.
influxdb:
  host: ''
  port: 8086
  db: telegraf
  monitoring: true
  storageSize: 1024Mi

# Victoria Metrics settings.
victoriametrics:
  enabled: true
  # Deploy a Victoria Metrics cluster
  deploy: true
  # Use existing Victoria Metrics cluster
  readEndpoint: ''
  writeEndpoint: ''
  rbac:
    pspEnabled: false
  vmselect:
    replicaCount: 1
    extraArgs:
      # Show the most recent datapoints without any latency
      search.latencyOffset: 0s
      # Don't cache the last 15m because they may be backfilled by telegraf
      search.cacheTimestampOffset: 15m
      search.maxQueryLen: 1GiB
    resources:
      limits:
        cpu: 1
        memory: 640Mi
      requests:
        cpu: 50m
        memory: 64Mi
  vminsert:
    extraArgs:
      # Save space by converting timestamps from milliseconds to seconds
      influxTrimTimestamp: 1s
    replicaCount: 1
    resources:
      limits:
        cpu: 1
        memory: 640Mi
      requests:
        cpu: 50m
        memory: 64Mi
  vmstorage:
    replicaCount: 1
    retentionPeriod: 12
    resources:
      limits:
        cpu: 1
        memory: 640Mi
      requests:
        cpu: 250m
        memory: 256Mi
    persistentVolume:
      size: 8Gi
      storageClass: ""

# Options for rabbitmq subchart.
rabbitmq:
  deploy: true
  auth:
    username: guest
    password: guest
    erlangCookie: guest
  metrics:
    enabled: true
  replicaCount: 1
  replicationFactor: 1
  clustering:
    forceBoot: true
  resources:
    requests:
      memory: 350Mi
      cpu: 1000m
    limits:
      memory: 1500Mi
      cpu: 2000m
  service:
    clusterIP: ''
  nodeSelector: {}
  updateStrategy:
    type: RollingUpdate
  extraConfiguration: |-
    tcp_listen_options.keepalive = true
    cluster_formation.node_cleanup.only_log_warning = true
    load_definitions = /app/load_definition.json
    prometheus.return_per_object_metrics = true
    consumer_timeout = 3600000
  loadDefinition:
    enabled: true
    existingSecret: |-
      {{ .Release.Name }}-rabbitmq-definition

# Use an external rabbitmq. This will only be used
# if `rabbitmq.deploy` is false.
rabbitmqExternal:
  host: rabbitmq
  port: 5672
  username: guest
  password: guest

# MongoDB settings. Change this to use a remote MongoDB cluster.
mongodb:
  deploy: true
  host: ''
  port: 27017
  auth:
    enabled: false

# Memcached settings. Change this to use a remote Memcached.
memcached:
  host: ''

# Docker settings (used by orchestration plugin).
# Either an external dockerhost or the deploy option must be set
# for orchestration to work.
docker:
  # Deploy an insecure dockerhost pod in-cluster. This option will deploy a privileged
  # pod, make sure your cluster's podsecuritypolicies allow running privileged pods.
  # deploy will only be evaluated if docker.host is not configured.
  deploy: true
  # External dockerhost settings
  host: ''
  port: 2375
  key: ''
  cert: ''
  ca: ''


# Monitoring settings.
monitoring:
  defaultMethod: telegraf-influxdb

# Allow registration of dev users, used for testing purposes.
enableDevUsers: false

# Set to false to serve raw UI files. Used during development.
jsBuild: true

# Internal authentication, encryption, signing keys.
internalKeys:
  sign: CHANGEME
  secret: ''
  cilia: ''

# Authentication configuration.
auth:
  email:
    signup: false
    signin: true
  google:
    signup: false
    signin: false
    key: ''
    secret: ''
  github:
    key: ''
    secret: ''
backup:
  key: ''
  secret: ''
  bucket: ''
  region: ''
  gpg:
    recipient: ''
    public: ''
# Used to clone repos.
githubBotToken: ''

# Currently only used by the SaaS version.
gitlabToken: ''
slackWebhooks:
  billing: ''
mixpanelToken: ''
customerio:
  sideId: ''
  apiKey: ''
googleAnalyticsId: ''
chatwootToken: ''
stripe:
  publicApiKey: ''
  secretApiKey: ''
sendgridEmailNotificationsKey: ''

# The (possibly multi-line) string given here, will be appended, as is, to the
# `settings.py` file. This is a quick and dirty way of overriding options not
# directly exposed in this file.
extraSettings: ''

# Node selector will be applied to all pods for all deployments, excluding
# subcharts.
nodeSelector: {}

sentry:
  api: ''
  apiv2: ''
  dramatiq: ''
  sockjs: ''

preemptible:
  tolerations:
  - key: "preemptible"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  nodeAffinity:
    # requiredDuringSchedulingIgnoredDuringExecution:
    #   nodeSelectorTerms:
    #   - matchExpressions:
    #     - key: "preemptible"
    #       operator: "In"
    #       values:
    #       - "true"
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 1
      preference:
        matchExpressions:
        - key: "preemptible"
          operator: "In"
          values:
          - "true"

# Configure prometheus exporters. Subcharts may require separate configuration.
prometheus:
  enabled: false
  operator:
    enabled: false
    serviceMonitor:
      interval: 20s
      namespace: monitoring
      selector:
        prometheus: kube-prometheus
    rules:
      interval: 20s
      namespace: monitoring
      selector:
        prometheus: kube-prometheus

# Deployment options (replicas, resource quotas etc).
deployment:
  # Gocky deployment settings.
  gocky:
    replicas: 1
    autoscaling: &autoscaling
      enabled: false
      minReplicas: 1
      maxReplicas: 20
      targetCPUUtilizationPercentage: 95
      # targetMemoryUtilizationPercentage: 80
      customMetric:
        enabled: false
        name: hpa_custom_metrics_deployment_queues_length
        targetValue: 10
    resources:
      requests:
        memory: 10Mi
        cpu: 50m
      limits:
        memory: 50Mi
        cpu: 1000m

  # Api deployment settings.
  api:
    replicas: 1
    autoscaling: *autoscaling
    resources:
      requests:
        memory: 500Mi
        cpu: 250m
      limits:
        memory: 1500Mi
        cpu: 2500m

  # Dramatiq deployment settings.
  dramatiq:
    dramatiq:
      enabled: true
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 1170Mi
          cpu: 250m
        limits:
          memory: 1700Mi
          cpu: 2000m
      processes: "2"
      threads: "8"
      queues:
        - default
        - dramatiq_mappings
        - dramatiq_scripts
        - dramatiq_provisioning
        - dramatiq_schedules
        - dramatiq_sessions
        - dramatiq_ping_probe
        - dramatiq_ssh_probe
        - dramatiq_rules
        - dramatiq_polling
        - dramatiq_machines
        - dramatiq_clusters
        - dramatiq_networks
        - dramatiq_zones
        - dramatiq_volumes
        - dramatiq_buckets

    # Queue-specific runners. Off by default.
    default:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 500Mi
          cpu: 200m
        limits:
          memory: 1700Mi
          cpu: 2000m
      processes: "2"
      threads: "8"
      queues:
        - default
    provisioning:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 200Mi
          cpu: 20m
        limits:
          memory: 800Mi
          cpu: 1500m
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_provisioning
    polling:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 500Mi
          cpu: 20m
        limits:
          memory: 1700Mi
          cpu: 2000m
      preemptible: true
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_polling
    machines:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 500Mi
          cpu: 20m
        limits:
          memory: 1700Mi
          cpu: 2000m
      preemptible: true
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_machines
    clusters:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 200Mi
          cpu: 20m
        limits:
          memory: 800Mi
          cpu: 2000m
      preemptible: true
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_clusters
    networks:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 500Mi
          cpu: 20m
        limits:
          memory: 1700Mi
          cpu: 2000m
      preemptible: true
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_networks
    zones:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 200Mi
          cpu: 20m
        limits:
          memory: 800Mi
          cpu: 2000m
      preemptible: true
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_zones
    volumes:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 500Mi
          cpu: 20m
        limits:
          memory: 1700Mi
          cpu: 2000m
      preemptible: true
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_volumes
    buckets:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 500Mi
          cpu: 20m
        limits:
          memory: 1700Mi
          cpu: 2000m
      preemptible: true
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_buckets
    mappings:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 200Mi
          cpu: 20m
        limits:
          memory: 800Mi
          cpu: 2000m
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_mappings
        - dramatiq_sessions
    scripts:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 200Mi
          cpu: 20m
        limits:
          memory: 1000Mi
          cpu: 2000m
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_scripts
    probe:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 200Mi
          cpu: 20m
        limits:
          memory: 800Mi
          cpu: 1000m
      preemptible: true
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_ssh_probe
    ping:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 200Mi
          cpu: 20m
        limits:
          memory: 800Mi
          cpu: 1000m
      preemptible: true
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_ping_probe
    rules:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 200Mi
          cpu: 20m
        limits:
          memory: 800Mi
          cpu: 1000m
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_rules
    schedules:
      enabled: false
      replicas: 1
      autoscaling: *autoscaling
      resources:
        requests:
          memory: 200Mi
          cpu: 20m
        limits:
          memory: 800Mi
          cpu: 1000m
      processes: "2"
      threads: "8"
      queues:
        - dramatiq_schedules

  # Sockjs deployment settings.
  sockjs:
    replicas: 1
    autoscaling: *autoscaling
    resources:
      requests:
        memory: 100Mi
        cpu: 15m
      limits:
        memory: 800Mi
        cpu: 1200m

  # UI deployment settings.
  ui:
    replicas: 1
    autoscaling: *autoscaling
    resources:
      requests:
        memory: 50Mi
        cpu: 10m
      limits:
        memory: 250Mi
        cpu: 500m

  # Nginx deployment settings.
  nginx:
    replicas: 1
    autoscaling: *autoscaling
    resources:
      requests:
        memory: 30Mi
        cpu: 20m
      limits:
        memory: 60Mi
        cpu: 500m

  # Landing deployment settings.
  landing:
    replicas: 1
    autoscaling: *autoscaling
    resources:
      requests:
        memory: 50Mi
        cpu: 10m
      limits:
        memory: 250Mi
        cpu: 200m

  # APScheduler deployment settings
  scheduler:
    scheduler:
      enabled: true
      replicas: 1
      resources:
        requests:
          memory: 200Mi
          cpu: 100m
        limits:
          memory: 1000Mi
          cpu: 1000m
      schedules:
        - builtin
        - user
        - polling
        - rules
    builtin:
      enabled: false
      replicas: 1
      resources:
        requests:
          memory: 100Mi
          cpu: 10m
        limits:
          memory: 400Mi
          cpu: 1000m
      schedules:
        - builtin
    user:
      enabled: false
      replicas: 1
      resources:
        requests:
          memory: 200Mi
          cpu: 10m
        limits:
          memory: 1000Mi
          cpu: 1000m
      schedules:
        - user
    polling:
      enabled: false
      replicas: 1
      resources:
        requests:
          memory: 200Mi
          cpu: 10m
        limits:
          memory: 1000Mi
          cpu: 1000m
      schedules:
        - polling 
    rules:
      enabled: false
      replicas: 1
      resources:
        requests:
          memory: 200Mi
          cpu: 10m
        limits:
          memory: 1000Mi
          cpu: 1000m
      schedules:
        - rules


# NOTE: The following settings only take effect on chart installation 
# and not on any subsequent chart upgrades.
# User auto-creation settings. If `enabled` is set to true a new
# user will be created with the specified email,password and api token.
# An Organization will also be created with the user as the only owner.
portalAdmin:
  enabled: true
  organization: "example.com"
  mail: "admin@example.com"
  # If password is left empty, one will be autogenerated and instructions
  # to access it will be printed after Helm installation.
  password: ""
  # Generate an API token for the user. Instructions to access the 
  # generated API token will be printed after Helm installation.
  createApiToken: true

