stages:
  - discover-submodules
  - build
  - deploy
  - test
  - undeploy
  - release


#################### DISCOVER-SUBMODULES STAGE ####################

discover-submodules:
  stage: discover-submodules
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    # Will fetch to get all new branches for find-submodules.sh
    - git fetch -p --recurse-submodules
    - ./ci/find-submodules.sh -n
    - cp ci/update-pipelines.sh update-pipelines
  artifacts:
    paths:
      - all-submodules.csv
      - related-submodules.csv
      - update-pipelines
    expire_in: 3 days
  tags:
    - shell-docker-light
  dependencies: []


#################### BUILD STAGE ####################

# Wait for images we depend on to become available.

.docker_wait_submodule_img_template: &docker_wait_submodule_img_template
  stage: build
  variables:
    GIT_STRATEGY: none
    NUM: "60"
    SLEEP: "10"
  script:
    - SUBMODULE_SHA=$(grep ^$REPO, all-submodules.csv | cut -d, -f2)
    - echo SUBMODULE_SHA is $SUBMODULE_SHA
    - GCR_IMG="gcr.io/mist-ops/$IMG"
    - DOCKERHUB_IMG="mist/$IMG"
    - IMGTAG="$GCR_IMG:$SUBMODULE_SHA"
    - echo IMTAG is $IMGTAG

    - echo "Will pull docker image $IMGTAG"
    - for i in $(seq 1 $NUM); do docker pull $IMGTAG && OK=1 && break || sleep $SLEEP; done
    - if [ -z "$OK" ]; then echo "ERROR Couldn't pull $IMGTAG!" && exit 1; fi

    - |
        for img_name in $GCR_IMG $DOCKERHUB_IMG; do
          for ref in $CI_COMMIT_SHA $CI_COMMIT_REF_SLUG; do
            IMGTAG2=$img_name:io-$ref
            echo "Will tag and push $IMGTAG2"
            docker tag $IMGTAG $IMGTAG2
            docker push $IMGTAG2
          done
        done
  tags:
    - shell-docker-light
  dependencies:
    - discover-submodules

wait-api-image:
  <<: *docker_wait_submodule_img_template
  before_script:
    - REPO=mistio/mist.api
    - IMG=mist

wait-ui-image:
  <<: *docker_wait_submodule_img_template
  before_script:
    - REPO=mistio/mist.ui
    - IMG=ui

wait-landing-image:
  <<: *docker_wait_submodule_img_template
  before_script:
    - REPO=mistio/mist.landing
    - IMG=landing

wait-tests-image:
  <<: *docker_wait_submodule_img_template
  before_script:
    - REPO=mistio/mist.tests
    - IMG=tests_base


# Build secondary images needed for deploying. Tag with SHA and branch name.

.docker_build_img_template: &docker_build_img_template
  stage: build
  script:
    - GCR_IMG="gcr.io/mist-ops/$IMG"
    - DOCKERHUB_IMG="mist/$IMG"
    - IMGTAG="$GCR_IMG:$CI_COMMIT_SHA"
    - echo "Will build $IMGTAG"
    - cd docker/$IMG
    - docker build --pull -t $IMGTAG .
    - |
        for img_name in $GCR_IMG $DOCKERHUB_IMG; do
          for ref in $CI_COMMIT_SHA $CI_COMMIT_REF_SLUG; do
            for prefix in "io-" ""; do
              IMGTAG2=$img_name:$prefix$ref
              echo "Will tag and push $IMGTAG2"
              docker tag $IMGTAG $IMGTAG2
              docker push $IMGTAG2
            done
          done
        done
  tags:
    - builder
  dependencies: []

build-nginx:
  <<: *docker_build_img_template
  variables:
    IMG: nginx

build-logstash:
  <<: *docker_build_img_template
  variables:
    IMG: logstash

build-elasticsearch-manage:
  <<: *docker_build_img_template
  variables:
    IMG: elasticsearch-manage


# Manually build images, tag is SHA/branch independant

.docker_manual_build_img_template: &docker_manual_build_img_template
  stage: build
  when: manual
  script:
    - export TAG="${TAG:-latest}"
    - echo "Will build img $IMG with tag $TAG."
    - cd docker/$IMG
    - docker build --pull -t gcr.io/mist-ops/$IMG:$TAG .
    - docker tag gcr.io/mist-ops/$IMG:$TAG mist/$IMG:$TAG
    - docker push gcr.io/mist-ops/$IMG:$TAG
    - docker push mist/$IMG:$TAG
  tags:
    - builder
  dependencies: []

build-alpine-manual:
  <<: *docker_manual_build_img_template
  variables:
    IMG: alpine
    TAG: "3.4"

build-socat-manual:
  <<: *docker_manual_build_img_template
  variables:
    IMG: docker-socat

build-mailmock-manual:
  <<: *docker_manual_build_img_template
  variables:
    IMG: mailmock

build-debugger-manual:
  <<: *docker_manual_build_img_template
  variables:
    IMG: debugger


#################### DEPLOY STAGE ####################

.deploy_template: &deploy_template
  stage: deploy
  image: gcr.io/mist-ops/deployer
  dependencies: []
  script:
    - ./ci/deploy.sh
  tags:
    - kube-default

deploy_review_env:
  <<: *deploy_template
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: http://$CI_COMMIT_REF_SLUG.io.review.ops.mist.io
    on_stop: undeploy_review_env
  variables:
    NAMESPACE: io-review-$CI_COMMIT_REF_SLUG
    DNS_PREFIX: $CI_COMMIT_REF_SLUG.io.review.ops

deploy_test_env:
  <<: *deploy_template
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    url: http://$CI_COMMIT_REF_SLUG.io.test.ops.mist.io
    on_stop: undeploy_test_env
  variables:
    NAMESPACE: io-test-$CI_COMMIT_REF_SLUG
    DNS_PREFIX: $CI_COMMIT_REF_SLUG.io.test.ops
    EXPIRE_HOURS: "12"


#################### TEST STAGE ####################

.test_template: &test_template
  stage: test
  image: gcr.io/mist-ops/tests_base:io-$CI_COMMIT_SHA
  variables:
    GIT_STRATEGY: none
    MIST_URL: http://$CI_COMMIT_REF_SLUG.io.test.ops.mist.io
    DISPLAY: ":1.0"
    REGISTER_USER_BEFORE_FEATURE: "True"
    EMAIL: fatboy.tester.mist.io+${CI_JOB_ID}@gmail.com
  dependencies:
    - discover-submodules
  before_script:
    - 'export TEST=$(echo "$CI_JOB_NAME" | cut -d/ -f1 | cut -d: -f2,3 | tr : /)'
    - echo "Test argument is $TEST"
    - ./update-pipelines -n io:$CI_JOB_NAME running
    - echo $TEST_SETTINGS | base64 -d > test_settings.py

.api_test_template: &api_test_template
  <<: *test_template
  script:
    - /mist.tests/prepare_env.py --api -s /mist.tests/misttests/api/$TEST.py || export FAILED=1
    - ./update-pipelines -n io:$CI_JOB_NAME result
  tags:
    - kube-default

.ui_test_template: &ui_test_template
  <<: *test_template
  script:
    - /mist.tests/prepare_env.py -k --stop --tags=$TEST /mist.tests/misttests/gui/core/pr/features || export FAILED=1
    - ./update-pipelines -n io:$CI_JOB_NAME result
  artifacts:
    paths:
      - js_console.log
      - error*
      - test.mp4
    expire_in: 3 days
    when: on_failure
  tags:
    - cpu


API:io:api_token: *api_test_template
API:io:clouds: *api_test_template
API:io:dns: *api_test_template
API:io:keys: *api_test_template
API:io:images: *api_test_template
API:io:libcloud_1/2: *api_test_template
API:io:libcloud_2/2: *api_test_template
API:io:machines: *api_test_template
API:io:networks: *api_test_template
API:io:schedules: *api_test_template
API:io:scripts: *api_test_template


UI:clouds-add-1/2: *ui_test_template
UI:clouds-add-2/2: *ui_test_template
UI:clouds-actions: *ui_test_template
UI:keys: *ui_test_template
UI:machines: *ui_test_template
UI:schedulers-1/2: *ui_test_template
UI:schedulers-2/2: *ui_test_template
UI:scripts: *ui_test_template
UI:scripts-actions: *ui_test_template
UI:images-networks: *ui_test_template
UI:user-actions: *ui_test_template
UI:rbac-teams: *ui_test_template


#################### UNDEPLOY STAGE ####################

.undeploy_template: &undeploy_template
  stage: undeploy
  image: gcr.io/mist-ops/deployer
  dependencies: []
  script:
    - kubectl delete namespace $NAMESPACE
    - cli53 rrdelete mist.io $DNS_PREFIX A || echo "Already deleted"
  tags:
    - kube-default

undeploy_review_env:
  <<: *undeploy_template
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  variables:
    NAMESPACE: io-review-$CI_COMMIT_REF_SLUG
    DNS_PREFIX: $CI_COMMIT_REF_SLUG.io.review.ops

undeploy_test_env:
  <<: *undeploy_template
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    action: stop
  variables:
    NAMESPACE: io-test-$CI_COMMIT_REF_SLUG
    DNS_PREFIX: $CI_COMMIT_REF_SLUG.io.test.ops


#################### RELEASE STAGE ####################

release: &release_template
  stage: release
  image: python:2.7-alpine
  before_script:
    - apk add --update libmagic
    - pip install requests python-magic
  script:
    - mkdir release
    - sed "s/\$MIST_TAG/$CI_BUILD_REF_SLUG/g" docker-compose.yml > release/docker-compose.yml
    - sed "s/TAG/$CI_BUILD_REF_NAME/g" ci/release.md > release.md
    - ./ci/release.py $RELEASE_ARGS --draft -f release/* -m @release.md mistio mist.io $CI_BUILD_REF_NAME
  only:
    # only for references that match a version string (v1.2.3)
    - /^v\d+\.\d+\.\d+$/
  except:
    # Except branches, meaning it'll only apply to git tags
    - branches

prerelease:
  <<: *release_template
  variables:
    RELEASE_ARGS: "--prerelease"
  only:
    # only for references that match a prelease version string (v1.2.3-beta)
    - /^v\d+\.\d+\.\d+-.+$/
